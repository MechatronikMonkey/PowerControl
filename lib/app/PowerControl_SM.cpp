// Autogenerated with StateSmith 0.9.14-alpha+1f116014cd5077a4daa688d05b563fe0be54ef0c.
// Algorithm: Balanced1. See https://github.com/StateSmith/StateSmith/wiki/Algorithms

// Whatever you put in the IRenderConfig.FileTop section ends up at the top of the generated file(s).
// user IRenderConfigC.CFileTop: whatever you want to put in here.
//#include <stdio.h> // or whatever you need
#include "PowerControl_SM.h"
// user IRenderConfigC.CFileIncludes: whatever you want to put in here.
#include <stdbool.h> // required for `consume_event` flag
#include <string.h> // for memset

// This function is used when StateSmith doesn't know what the active leaf state is at
// compile time due to sub states or when multiple states need to be exited.
static void exit_up_to_state_handler(PowerControl_SM* sm, PowerControl_SM_Func desired_state_exit_handler);

static void ROOT_enter(PowerControl_SM* sm);

static void ROOT_exit(PowerControl_SM* sm);

static void STATE_ERROR_enter(PowerControl_SM* sm);

static void STATE_ERROR_exit(PowerControl_SM* sm);

static void STATE_INIT_enter(PowerControl_SM* sm);

static void STATE_INIT_exit(PowerControl_SM* sm);

static void STATE_INIT_do(PowerControl_SM* sm);

static void STATE_NORMALOPERATION_enter(PowerControl_SM* sm);

static void STATE_NORMALOPERATION_exit(PowerControl_SM* sm);

static void STATE_CONTROLPOWER_enter(PowerControl_SM* sm);

static void STATE_CONTROLPOWER_exit(PowerControl_SM* sm);

static void STATE_FULLPOWER_enter(PowerControl_SM* sm);

static void STATE_FULLPOWER_exit(PowerControl_SM* sm);

static void STATE_OFF_enter(PowerControl_SM* sm);

static void STATE_OFF_exit(PowerControl_SM* sm);

static void STATE_OFF_do(PowerControl_SM* sm);


// State machine constructor. Must be called before start or dispatch event functions. Not thread safe.
void PowerControl_SM_ctor(PowerControl_SM* sm)
{
    memset(sm, 0, sizeof(*sm));
}

// Starts the state machine. Must be called before dispatching events. Not thread safe.
void PowerControl_SM_start(PowerControl_SM* sm)
{
    ROOT_enter(sm);
    // ROOT behavior
    // uml: TransitionTo(ROOT.<InitialState>)
    {
        // Step 1: Exit states until we reach `ROOT` state (Least Common Ancestor for transition). Already at LCA, no exiting required.
        
        // Step 2: Transition action: ``.
        
        // Step 3: Enter/move towards transition target `ROOT.<InitialState>`.
        // ROOT.<InitialState> is a pseudo state and cannot have an `enter` trigger.
        
        // ROOT.<InitialState> behavior
        // uml: TransitionTo(STATE_Init)
        {
            // Step 1: Exit states until we reach `ROOT` state (Least Common Ancestor for transition). Already at LCA, no exiting required.
            
            // Step 2: Transition action: ``.
            
            // Step 3: Enter/move towards transition target `STATE_Init`.
            STATE_INIT_enter(sm);
            
            // Step 4: complete transition. Ends event dispatch. No other behaviors are checked.
            sm->state_id = PowerControl_SM_StateId_STATE_INIT;
            // No ancestor handles event. Can skip nulling `ancestor_event_handler`.
            return;
        } // end of behavior for ROOT.<InitialState>
    } // end of behavior for ROOT
}

// Dispatches an event to the state machine. Not thread safe.
void PowerControl_SM_dispatch_event(PowerControl_SM* sm, PowerControl_SM_EventId event_id)
{
    PowerControl_SM_Func behavior_func = sm->current_event_handlers[event_id];
    
    while (behavior_func != NULL)
    {
        sm->ancestor_event_handler = NULL;
        behavior_func(sm);
        behavior_func = sm->ancestor_event_handler;
    }
}

// This function is used when StateSmith doesn't know what the active leaf state is at
// compile time due to sub states or when multiple states need to be exited.
static void exit_up_to_state_handler(PowerControl_SM* sm, PowerControl_SM_Func desired_state_exit_handler)
{
    while (sm->current_state_exit_handler != desired_state_exit_handler)
    {
        sm->current_state_exit_handler(sm);
    }
}


////////////////////////////////////////////////////////////////////////////////
// event handlers for state ROOT
////////////////////////////////////////////////////////////////////////////////

static void ROOT_enter(PowerControl_SM* sm)
{
    // setup trigger/event handlers
    sm->current_state_exit_handler = ROOT_exit;
}

static void ROOT_exit(PowerControl_SM* sm)
{
    // State machine root is a special case. It cannot be exited. Mark as unused.
    (void)sm;
}


////////////////////////////////////////////////////////////////////////////////
// event handlers for state STATE_ERROR
////////////////////////////////////////////////////////////////////////////////

static void STATE_ERROR_enter(PowerControl_SM* sm)
{
    // setup trigger/event handlers
    sm->current_state_exit_handler = STATE_ERROR_exit;
    
    // STATE_Error behavior
    // uml: enter
    {
        // Step 1: execute action ``
    } // end of behavior for STATE_Error
}

static void STATE_ERROR_exit(PowerControl_SM* sm)
{
    // adjust function pointers for this state's exit
    sm->current_state_exit_handler = ROOT_exit;
}


////////////////////////////////////////////////////////////////////////////////
// event handlers for state STATE_INIT
////////////////////////////////////////////////////////////////////////////////

static void STATE_INIT_enter(PowerControl_SM* sm)
{
    // setup trigger/event handlers
    sm->current_state_exit_handler = STATE_INIT_exit;
    sm->current_event_handlers[PowerControl_SM_EventId_DO] = STATE_INIT_do;
    
    // STATE_Init behavior
    // uml: enter
    {
        // Step 1: execute action ``
    } // end of behavior for STATE_Init
}

static void STATE_INIT_exit(PowerControl_SM* sm)
{
    // adjust function pointers for this state's exit
    sm->current_state_exit_handler = ROOT_exit;
    sm->current_event_handlers[PowerControl_SM_EventId_DO] = NULL;  // no ancestor listens to this event
}

static void STATE_INIT_do(PowerControl_SM* sm)
{
    // No ancestor state handles `do` event.
    
    // STATE_Init behavior
    // uml: do [InitSuccess = 0] TransitionTo(STATE_Error)
    if (InitSuccess = 0)
    {
        // Step 1: Exit states until we reach `ROOT` state (Least Common Ancestor for transition).
        STATE_INIT_exit(sm);
        
        // Step 2: Transition action: ``.
        
        // Step 3: Enter/move towards transition target `STATE_Error`.
        STATE_ERROR_enter(sm);
        
        // Step 4: complete transition. Ends event dispatch. No other behaviors are checked.
        sm->state_id = PowerControl_SM_StateId_STATE_ERROR;
        // No ancestor handles event. Can skip nulling `ancestor_event_handler`.
        return;
    } // end of behavior for STATE_Init
    
    // STATE_Init behavior
    // uml: do [InitSuccess = 1] TransitionTo(STATE_NormalOperation)
    if (InitSuccess = 1)
    {
        // Step 1: Exit states until we reach `ROOT` state (Least Common Ancestor for transition).
        STATE_INIT_exit(sm);
        
        // Step 2: Transition action: ``.
        
        // Step 3: Enter/move towards transition target `STATE_NormalOperation`.
        STATE_NORMALOPERATION_enter(sm);
        
        // STATE_NormalOperation.<InitialState> behavior
        // uml: TransitionTo(STATE_Off)
        {
            // Step 1: Exit states until we reach `STATE_NormalOperation` state (Least Common Ancestor for transition). Already at LCA, no exiting required.
            
            // Step 2: Transition action: ``.
            
            // Step 3: Enter/move towards transition target `STATE_Off`.
            STATE_OFF_enter(sm);
            
            // Step 4: complete transition. Ends event dispatch. No other behaviors are checked.
            sm->state_id = PowerControl_SM_StateId_STATE_OFF;
            // No ancestor handles event. Can skip nulling `ancestor_event_handler`.
            return;
        } // end of behavior for STATE_NormalOperation.<InitialState>
    } // end of behavior for STATE_Init
}


////////////////////////////////////////////////////////////////////////////////
// event handlers for state STATE_NORMALOPERATION
////////////////////////////////////////////////////////////////////////////////

static void STATE_NORMALOPERATION_enter(PowerControl_SM* sm)
{
    // setup trigger/event handlers
    sm->current_state_exit_handler = STATE_NORMALOPERATION_exit;
}

static void STATE_NORMALOPERATION_exit(PowerControl_SM* sm)
{
    // adjust function pointers for this state's exit
    sm->current_state_exit_handler = ROOT_exit;
}


////////////////////////////////////////////////////////////////////////////////
// event handlers for state STATE_CONTROLPOWER
////////////////////////////////////////////////////////////////////////////////

static void STATE_CONTROLPOWER_enter(PowerControl_SM* sm)
{
    // setup trigger/event handlers
    sm->current_state_exit_handler = STATE_CONTROLPOWER_exit;
    
    // STATE_ControlPower behavior
    // uml: enter
    {
        // Step 1: execute action ``
    } // end of behavior for STATE_ControlPower
}

static void STATE_CONTROLPOWER_exit(PowerControl_SM* sm)
{
    // STATE_ControlPower behavior
    // uml: exit
    {
        // Step 1: execute action ``
    } // end of behavior for STATE_ControlPower
    
    // adjust function pointers for this state's exit
    sm->current_state_exit_handler = STATE_NORMALOPERATION_exit;
}


////////////////////////////////////////////////////////////////////////////////
// event handlers for state STATE_FULLPOWER
////////////////////////////////////////////////////////////////////////////////

static void STATE_FULLPOWER_enter(PowerControl_SM* sm)
{
    // setup trigger/event handlers
    sm->current_state_exit_handler = STATE_FULLPOWER_exit;
    
    // STATE_FullPower behavior
    // uml: enter
    {
        // Step 1: execute action ``
    } // end of behavior for STATE_FullPower
}

static void STATE_FULLPOWER_exit(PowerControl_SM* sm)
{
    // adjust function pointers for this state's exit
    sm->current_state_exit_handler = STATE_NORMALOPERATION_exit;
}


////////////////////////////////////////////////////////////////////////////////
// event handlers for state STATE_OFF
////////////////////////////////////////////////////////////////////////////////

static void STATE_OFF_enter(PowerControl_SM* sm)
{
    // setup trigger/event handlers
    sm->current_state_exit_handler = STATE_OFF_exit;
    sm->current_event_handlers[PowerControl_SM_EventId_DO] = STATE_OFF_do;
    
    // STATE_Off behavior
    // uml: enter
    {
        // Step 1: execute action ``
    } // end of behavior for STATE_Off
}

static void STATE_OFF_exit(PowerControl_SM* sm)
{
    // adjust function pointers for this state's exit
    sm->current_state_exit_handler = STATE_NORMALOPERATION_exit;
    sm->current_event_handlers[PowerControl_SM_EventId_DO] = NULL;  // no ancestor listens to this event
}

static void STATE_OFF_do(PowerControl_SM* sm)
{
    // No ancestor state handles `do` event.
    
    // STATE_Off behavior
    // uml: do TransitionTo(STATE_FullPower)
    {
        // Step 1: Exit states until we reach `STATE_NormalOperation` state (Least Common Ancestor for transition).
        STATE_OFF_exit(sm);
        
        // Step 2: Transition action: ``.
        
        // Step 3: Enter/move towards transition target `STATE_FullPower`.
        STATE_FULLPOWER_enter(sm);
        
        // Step 4: complete transition. Ends event dispatch. No other behaviors are checked.
        sm->state_id = PowerControl_SM_StateId_STATE_FULLPOWER;
        // No ancestor handles event. Can skip nulling `ancestor_event_handler`.
        return;
    } // end of behavior for STATE_Off
}

// Thread safe.
char const * PowerControl_SM_state_id_to_string(PowerControl_SM_StateId id)
{
    switch (id)
    {
        case PowerControl_SM_StateId_ROOT: return "ROOT";
        case PowerControl_SM_StateId_STATE_ERROR: return "STATE_ERROR";
        case PowerControl_SM_StateId_STATE_INIT: return "STATE_INIT";
        case PowerControl_SM_StateId_STATE_NORMALOPERATION: return "STATE_NORMALOPERATION";
        case PowerControl_SM_StateId_STATE_CONTROLPOWER: return "STATE_CONTROLPOWER";
        case PowerControl_SM_StateId_STATE_FULLPOWER: return "STATE_FULLPOWER";
        case PowerControl_SM_StateId_STATE_OFF: return "STATE_OFF";
        default: return "?";
    }
}

// Thread safe.
char const * PowerControl_SM_event_id_to_string(PowerControl_SM_EventId id)
{
    switch (id)
    {
        case PowerControl_SM_EventId_DO: return "DO";
        default: return "?";
    }
}
